# -*- coding: utf-8 -*-
#
# File: jmeter
#
# Copyright (c) InQuant GmbH
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
# __author__ = 'Hans-Peter Locher <hans-peter.locher@inquant.de>'
# __docformat__ = 'plaintext'
#
# example agent output (assuming agent has testplans Test-long.jmx Test-short.jmx Test-short2.jmx)
#
#going_to_run_test_plan jmeter_plans/Test-long.jmx
#Creating summariser <summary> Created the tree successfully using jmeter_plans/Test-long.jmx Starting the test @ Thu Jul 14 16:48:58 CEST 2011 (1310654938213) Waiting for possible shutdown message on port 4445 summary = 170 in 56.9s = 3.0/s Avg: 333 Min: 39 Max: 5748 Err: 8 (4.71%) Tidying up ... @ Thu Jul 14 16:49:56 CEST 2011 (1310654996017) ... end of run
#going_to_run_test_plan jmeter_plans/Test-short.jmx
#Creating summariser <summary> Created the tree successfully using jmeter_plans/Test-short.jmx Starting the test @ Thu Jul 14 16:49:56 CEST 2011 (1310654996773) Waiting for possible shutdown message on port 4445 summary = 2 in 0.2s = 9.8/s Avg: 95 Min: 50 Max: 141 Err: 0 (0.00%) Tidying up ... @ Thu Jul 14 16:49:57 CEST 2011 (1310654997650) ... end of run
#going_to_run_test_plan jmeter_plans/Test-short2.jmx
#java.lang.Throwable: Could not access /usr/share/jmeter/lib/junit
#        at org.apache.jmeter.NewDriver.<clinit>(NewDriver.java:96)
#Creating summariser <summary> Created the tree successfully using jmeter_plans/Test-short2.jmx Starting the test @ Thu Jul 14 16:49:58 CEST 2011 (1310654998895) Waiting for possible shutdown message on port 4445 summary = 2 in 0.2s = 10.0/s Avg: 96 Min: 49 Max: 144 Err: 0 (0.00%) Tidying up ... @ Thu Jul 14 16:49:59 CEST 2011 (1310654999878) ... end of run


import datetime

#XXX change to percentages for errors, makes more sense than absolute number of errors
jmeter_default_values = {"warn_duration": 10,
                         "crit_duration": 20, 
                         "warn_errors": 100,
                         "crit_errors": 200}


# the inventory function 
def inventory_jmeter(checkname, info): 
    inventory = [] 
    # loop over all output lines of the agent 
    for line in info:
        if line[0] == "going_to_run_test_plan":
            testplan = line[1]
            #1. the item 
            #2. a comment or an empty string (will be written as a comment into the autochecks file) 
            #3. the default parameter for the check or None 
            #print testplan
            inventory.append((testplan, "", "jmeter_default_values")) 
    return inventory 

# the check function
def check_jmeter(item, params, info):
    #unpack check parameters
    warn_duration = params["warn_duration"]
    crit_duration = params["crit_duration"]
    warn_errors = params["warn_errors"]
    crit_errors = params["crit_errors"]
    #return (2, "CRITICAL - dimm item is %s , info is %s" % (item, info))
    matches = False
    for line in info:
        if matches:
            matches = False
            #compute duration
            start_stamp = line[line.index("Starting") + 10]
            stop_stamp = line[-5]
            start = get_time(start_stamp)
            stop = get_time(stop_stamp)
            duration = stop - start
            duration = duration.seconds
            #compute number of errors
            errors = line[line.index("summary") + 14] #total number of errors
            errors = int(errors)
            perfdata = [("errors", errors, warn_errors, crit_errors),
                        ("duration", duration, warn_duration, crit_duration)
                       ]
            if duration < warn_duration and errors < warn_errors:
                return (0, "OK - duration is %s seconds with %s occured errors" % (duration, errors), perfdata)
            if duration < crit_duration and errors < crit_errors:
                return (1, "WARNING - duration is %s seconds with %s occured errors" % (duration, errors), perfdata)
            if duration >= crit_duration or errors >= crit_errors:
                return (2, "CRITICAL - duration is %s seconds with %s occured errors" % (duration, errors), perfdata)
            return (3, "UNKNOWN - item %s" % item)
        if line[1] == item: 
            matches = True
    return (3, "UNKNOWN - item %s" % item)

# declare the check to Check_MK 
check_info['jmeter'] = (check_jmeter, "jmeter_%s", 1, inventory_jmeter) 

def get_time(stamp):
    """stamp = (1310561523238)
       returns a datetime object
    """
    epoch = stamp.strip("()")
    short_epoch = epoch[:10]
    return datetime.datetime.fromtimestamp(float(short_epoch))


# vim: set ft=python ts=4 sw=4 expandtab : 

